<UserControl
    x:Class="StoreCard.SecondaryButton"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:StoreCard"
    mc:Ignorable="d"
    d:DesignHeight="450"
    d:DesignWidth="800"
    d:DataContext="{d:DesignInstance Type=local:SecondaryButton, IsDesignTimeCreatable=False}">
    <Border
        HorizontalAlignment="Stretch"
        CornerRadius="5">
        <Border.Style>
            <!--  Must use template here for button background to be overridden  -->
            <Style
                TargetType="{x:Type Border}">
                <Setter
                    Property="Background"
                    Value="{DynamicResource ButtonDisabledBackgroundColor_Brush}" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding ElementName=CustomButton, Path=IsEnabled}"
                        Value="True">
                        <Setter
                            Property="Background"
                            Value="{DynamicResource ControlLightColor_Brush}" />
                    </DataTrigger>
                    <!--  Hover/press styling  -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition
                                Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}"
                                Value="True" />
                            <Condition
                                Binding="{Binding ElementName=CustomButton ,Path=IsEnabled}"
                                Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter
                            Property="Background"
                            Value="{DynamicResource ControlLightColor_Hover_Brush}" />
                    </MultiDataTrigger>
                    <DataTrigger
                        Binding="{Binding ElementName=CustomButton, Path=IsPressed}"
                        Value="True">
                        <Setter
                            Property="Background"
                            Value="{DynamicResource ControlLightColor_Pressed_Brush}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>
        <Button
            Name="CustomButton"
            BorderThickness="0,0,0,0"
            Click="CustomButton_Click"
            FontSize="14"
            IsTabStop="True">
            <Button.Style>
                <Style
                    TargetType="{x:Type Button}">
                    <Setter
                        Property="Background"
                        Value="Transparent" />
                    <Setter
                        Property="IsEnabled"
                        Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:SecondaryButton}}, Path=IsEnabled}" />
                    <Setter
                        Property="Template">
                        <Setter.Value>
                            <ControlTemplate
                                TargetType="{x:Type Button}">
                                <Border
                                    Background="{TemplateBinding Background}">
                                    <Label
                                        Padding="0"
                                        HorizontalAlignment="Center"
                                        HorizontalContentAlignment="Center"
                                        VerticalAlignment="Stretch"
                                        VerticalContentAlignment="Center"
                                        FontFamily="Segoe UI"
                                        Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:SecondaryButton}}, Path=Text}">
                                        <Label.Style>
                                            <Style
                                                TargetType="Label">
                                                <Style.Triggers>
                                                    <DataTrigger
                                                        Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}"
                                                        Value="False">
                                                        <!--  Font color when disabled  -->
                                                        <Setter
                                                            Property="Foreground"
                                                            Value="{DynamicResource ButtonDisabledTextColor_Brush}" />
                                                    </DataTrigger>
                                                    <DataTrigger
                                                        Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}"
                                                        Value="True">
                                                        <!--  Font color when enabled  -->
                                                        <Setter
                                                            Property="Foreground"
                                                            Value="White" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger
                            Property="IsMouseOver"
                            Value="True">
                            <Setter
                                Property="Background"
                                Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
    </Border>
</UserControl>